This project aims to explore the method to tell the topology of bitcoin nodes using information gathered from coinscope by passive listening. Although we are using only the simplest model in the calculation(counting every pairs of timely adjacent bitcoin message as one vote for the connection and using two manually set thresholds), the primary goal for this project is to visualize the topology relationship into human-readable graphs. Please note that some of these codes are just modification from originally existing bitcoin python package.

Provided file:
The addrmap.csv is a mapping table provided from coinscope that records the mapping of connectionIds and their corresponding IPs. This is not generated by these scripts.

Scripts:
(Note:for all description below, connection ID refers to the tuple of sid and handle_id)

readinv_2.py:
This is a modification of the readinv.py from bitcoin python package. By reading from verbatim log files from coinscope, this script decodes the information and write pairs of connection ID and transaction hash to the sample.txt file. 

timer.py:
similar to readinv_2.py, but this script only prints to the console and hence is only for testing and debugging use.

passivelistener.py:
addrmap.csv and sample.txt are required for this script
This script does the "simple voting" part as descirbed at the very beginning. Two threadholds value is set at the very beginning and should be adjusted according to each experiement setting. The output generated is a dot graph.
count threshold is how many counts from beginning do we accept from the beginning o eah transaction.
vote threshold is how many votes a connection need to have in order to be taken as a connection in the connection. 

gexfgenerator.py:
Every thing is similar besides that this script generates a gexf graph instead of a dot graph ultimately.

truthfilter.py:
short filter script to truncate out the needed groundtruth within a certain period, in order to do comparison with calucalted result.
